#!/usr/bin/env perl
use strict;
use warnings;
use version;
use Pod::Usage;
use File::Spec;
use File::Copy;
use File::Which;
use File::Temp 'tempdir';
use File::Copy::Recursive 'dircopy';
use FindBin '$Bin';
use Getopt::Long;
use Archive::Zip;

# global variables
my $asset_dir = "$Bin/../assets";
my %slides = (
	's5'       => "$asset_dir/slides/s5",
	'slidy'    => "$asset_dir/slides/slidy",
	'slideous' => "$asset_dir/slides/slideous",
	'dzslides' => "$asset_dir/slides/dzslides",
	'revealjs' => "$asset_dir/slides/revealjs",
);

# process command line arguments
my @markdowns;
my $title;
my $assets;
my $outfile;
my $slides;
my $pandoc;
GetOptions(
	'markdowns=s' => \@markdowns,
	'title=s'     => \$title,
	'assets=s'    => \$assets,
	'outfile=s'   => \$outfile,
	'slides=s'    => \$slides,
	'pandoc=s'    => \$pandoc,
);

# make sure our pandoc is ok
$pandoc = test_pandoc($pandoc);

# create the output directory
my $outdir = make_outdir();

# copy the assets
copy_assets(
	'slides' => $slides,
	'outdir' => $outdir,
	'assets' => $assets,
);

# convert the markdowns to htmls
my @htmls;
for my $m ( @markdowns ) {
	push @htmls, make_html(
		'markdown' => $m,
		'slides'   => $slides,
		'pandoc'   => $pandoc,
		'outdir'   => $outdir,
	);
}

# update the configure.js file
update_js(
	'title'  => $title,
	'htmls'  => \@htmls,
	'outdir' => $outdir,
);

# update the xml manifest
update_xml(
	'title'  => $title,
	'outdir' => $outdir,
);

# bundle the zip
bundle(
	'outdir'  => $outdir,
	'outfile' => $outfile,
);

sub test_pandoc {
	my $pandoc = shift;
	my $check = sub {
		my $p = shift;
		my @p = `$p --version`;
		if ( $p[0] =~ /(\d\.\d\.\d)/ ) {
			my $version = $1;
			if ( qv("v$version") >= qv("v2.7.2") ) {
				return $p;
			}
			else {
				pod2usage( { 
					'-message' => "Pandoc version $version lower than v2.7.2",
					'-exitval' => 2,  
					'-verbose' => 1
				})			
			}
		}
	};
	if ( not $pandoc ) {
		if ( $pandoc = which 'pandoc' ) {
			return $check->($pandoc);
		}
		else {
			pod2usage( { 
				'-message' => 'No pandoc provided, none found on system',
                '-exitval' => 1,  
                '-verbose' => 1
        	})		
		}	
	}
	else {
		if ( -x $pandoc ) {
			return $check->($pandoc);
		}
		else {
			pod2usage( { 
				'-message' => "Provided pandoc ($pandoc) is not an executable",
                '-exitval' => 1,  
                '-verbose' => 1
        	})		
		}
	}
}

sub make_outdir {
	my $tmpdir = tempdir( CLEANUP => 1 );
	my ( @parts ) = File::Spec->splitpath( $outfile );
	my $o = $parts[-1];
	my $outdir = "$tmpdir/$o";
	mkdir $outdir;
	return $outdir;
}

sub make_html {
	my %args = @_;
	
	# shrink pandoc arg name
	my $p = $args{'pandoc'};
	
	# create outfile name in outdir
	my $m = $args{'markdown'};
	my @dirs = File::Spec->splitpath($m);
	my $h = File::Spec->catfile( $args{'outdir'}, 'template', $dirs[-1] );
	$h =~ s/\.md$/.html/;
	
	# check slide format
	my $s = $args{'slides'};
	if ( $s ) {
		if ( not -d $slides{$s} ) {
			pod2usage( { 
				'-message' => "Unknown slide format: $s",
				'-exitval' => 3,  
				'-verbose' => 1
			})
		}
		else {
			system( 
				$p   => '-s',
				'-t' => $s, 
				'-f' => 'markdown',
				'-o' => $h,
				$m
			);
		}
	}
	else {
		system( 
			$p   => '-s',
			'-t' => 'html', 
			'-f' => 'markdown',
			'-o' => $h,
			$m
		);	
	}
	return $h;
}

sub copy_assets {
	my %args = @_;
	my $d = $args{'outdir'};
	
	# copy over the libscorm assets
	dircopy( "$asset_dir/libscorm/images"   => "$d/images"   );
	dircopy( "$asset_dir/libscorm/library"  => "$d/library"  );	
	dircopy( "$asset_dir/libscorm/template" => "$d/template" );		
	
	# copy over the scaffolding
	{
		opendir my $dh, "$asset_dir/scaffold";
		while( my $entry = readdir $dh ) {
			if ( $entry =~ /\.xml$/ or $entry =~ /\.xsd$/ ) {
				copy( "$asset_dir/scaffold/$entry" => "$d/$entry" );
			}
		}
	}
	
	# copy over the user supplied assets
	{	
		my $a = $args{'assets'};
		if ( $a and -d $a ) {
			opendir my $dh, $args{'assets'};
			while( my $entry = readdir $dh ) {
				next if $entry =~ /^\.\.?$/;
				copy( "$a/$entry" => "$d/libscorm/template/$entry" );
			}
		}
	}
	
	# copy over the slide assets, if any
	my $s = $args{'slides'};
	if ( $s ) {
		copy( $slides{$s} => "$d/libscorm/template/$s" );
	}
}

sub update_js {
	my %args = @_;
	my @htmls = @{ $args{'htmls'} };
	my $title = $args{'title'};
	my $o = $args{'outdir'};
	
	# create local file names of the htmls
	my @locals;
	for my $h ( @htmls ) {
		my ( @parts ) = File::Spec->splitpath( $h );
		push @locals, $parts[-1];
	}
	
	# read the original JS from the distro's assets, overwrite the copied one
	open my $in, '<', "$asset_dir/libscorm/template/configure.js";
	open my $out, '>', "$o/template/configure.js";
	while(<$in>) {
		my $line = $_;
		
		# replace the title
		if ( /var SCO_title/ ) {
			$line = "var SCO_title = '$title';\n";
		}
		
		# replace the navpages
		if ( /var NAV_pages/ ) {
			my $names = join ', ', map { "'$_'" } @locals;
			$line = "var NAV_pages = [ $names ];\n";
		}
		
		# print output
		print $out $line;	
	}
}

sub update_xml {
	my %args = @_;
	my $title = $args{'title'};
	my $o = $args{'outdir'};
	
	# read the original infile, overwrite the copied one
	open my $in, '<', "$asset_dir/scaffold/imsmanifest.xml";
	open my $out, '>', "$o/imsmanifest.xml";
	while(<$in>) {
		my $line = $_;
		$line =~ s/\{\{\{title\}\}\}/$title/;
		print $out $line;
	}
}

sub bundle {
	my %args = @_;
	my $of = $args{'outfile'};
	my $od = $args{'outdir'};
	my ( @parts ) = File::Spec->splitpath( $od );
	
	my $zip = Archive::Zip->new();
	$zip->addTree( $od => $parts[-1] );
	$zip->writeToFileNamed( $outfile . '.zip' )
}

